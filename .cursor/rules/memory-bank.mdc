---
description: 
globs: 
alwaysApply: true
---
# 经期助手（PeriodAssistant）项目规则
## 前置规范
- 请用中文回复所有问题
- 有自动导入组件的配置，不需要手动导入
- 所有组件都是用的是script setup的形式
- 所有样式都用scss来编写
- 所有的interface的命名，都要用"I"开头
- 项目的运行方式是pnpm run dev:h5
## 项目命名规范

1. **文件命名**
   - 页面文件：使用小写连字符命名，如 `period-calendar.uvue`
   - 组件文件：使用PascalCase命名，如 `CalendarView.uvue`
   - 工具/服务文件：使用小写连字符命名，如 `date-utils.uts`
   - 样式文件：与对应组件同名，如 `CalendarView.scss`

2. **变量/函数命名**
   - 变量和函数：使用camelCase，如 `getUserData()`
   - 常量：使用UPPER_SNAKE_CASE，如 `MAX_CYCLE_DAYS`
   - 组件属性：使用camelCase，如 `startDate`
   - 类型/接口：使用PascalCase，如 `interface UserProfile`

## 代码风格

1. **代码格式**
   - 使用2空格缩进
   - 每行代码最大长度为100字符
   - 文件末尾留一空行
   - 使用单引号而非双引号表示字符串

2. **组件结构**
   - 先template，再script，最后style
   - script标签属性中指定语言，如 `<script lang="uts">`
   - style标签使用scoped属性确保样式隔离

3. **注释风格**
   - 文件顶部添加文件描述注释
   - 函数添加功能、参数、返回值注释
   - 复杂逻辑添加详细注释
   - 代码TODO使用统一格式：`// TODO: 待办事项描述`

## 架构原则

1. **组件设计**
   - 单一职责原则：一个组件只负责一个功能
   - 组件尽量保持无状态，通过props传递数据
   - 共享状态使用Pinia管理
   - UI组件库优先使用nutui-uniapp
   - 公共逻辑抽取为组合式函数（composables）

2. **数据流**
   - 单向数据流：父组件向子组件传递数据
   - 事件向上：子组件向父组件通过事件通信
   - 避免props透传多层组件
   - 复杂状态管理使用Pinia store

3. **性能考量**
   - 避免不必要的响应式数据
   - 大列表使用虚拟滚动
   - 懒加载非关键组件
   - 避免深层嵌套的计算属性

## 项目特定约定

1. **日期处理**
   - 所有日期存储使用ISO格式字符串
   - 展示日期时根据用户语言环境格式化
   - 日期计算统一使用dayjs库中的工具函数
   - 周期天数计算包含起始日和结束日

2. **安全与隐私**
   - 敏感数据必须加密存储
   - 禁止记录未经用户授权的数据
   - 遵守隐私政策，明确数据使用范围
   - 提供数据导出与删除功能

3. **UI/UX约定**
   - 使用项目定义的颜色变量而非硬编码颜色
   - 文字大小使用相对单位（rpx）
   - 所有可交互元素要有明确的反馈
   - 敏感数据默认模糊处理，需用户主动查看

4. **错误处理**
   - 所有API调用都需要错误处理
   - 用户友好的错误提示
   - 关键操作失败时提供重试机制
   - 记录错误日志但保护用户隐私
5. 回复格式
   - 用中文回答。

## 学习记录

本节会随着项目进展不断更新，记录在项目开发过程中发现的模式和学习内容。

1. **项目结构特点**
   - uni-app项目使用.vue文件作为页面和组件
   - 业务逻辑使用UTS（UniApp TypeScript）编写
   - 项目配置主要通过manifest.json和pages.json管理

2. **平台特性**
   - 暂未记录，将在跨平台开发过程中补充

3. **性能模式**
   - 暂未记录，将在性能测试后补充

4. **用户偏好**
   - 暂未记录，将在用户测试后补充 